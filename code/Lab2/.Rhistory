sumVector=x[[j]]
totalVector=totalVector+sumVector
print("SumVector")
print(totalVector)
}
}
y[[i]]=totalVector
}
x[[1]]
y[[1]]
x[[2]]
y[[2]]
hist(y[1])
hist(y[[1]])
x1=runif(10000)
x2=runif(10000)
x3=runif(10000)
x4=runif(10000)
y1=x1
hist(y1)
max=100
x=c()
y=c()
for(i in 1:max)
{
x[[i]]=runif(10000)
}
for(i in 1:max)
{
sumVector=c()
totalVector=x[[1]]
print("i")
print(i)
if(i>1)
{
for(j in 2:i)
{
sumVector=x[[j]]
totalVector=totalVector+sumVector
print("SumVector")
print(totalVector)
}
}
y[[i]]=totalVector
}
max=100
x=c()
y=c()
for(i in 1:max)
{
x[[i]]=runif(10000)
}
for(i in 1:max)
{
sumVector=c()
totalVector=x[[1]]
if(i>1)
{
for(j in 2:i)
{
sumVector=x[[j]]
totalVector=totalVector+sumVector
}
}
y[[i]]=totalVector
}
hist(y[[1]])
hist(y1)
hist(y2)
hist(y[[2]])
hist(y3)
hist(y[[3]])
hist(y4)
hist(y[[4]])
hist(y[[1]])
hist(y[[2]])
hist(y[[5]])
hist(y[[10]])
hist(y[[30]])
hist(y[[100]])
replicate(100,runif(10000),simplify = FALSE)
replicate(100,runif(10000),simplify = TRUE)
x=replicate(100,runif(10000),simplify = TRUE)
for(i in 1:max)
{
sumVector=c()
totalVector=x[[1]]
if(i>1)
{
for(j in 2:i)
{
sumVector=x[[j]]
totalVector=totalVector+sumVector
}
}
y[[i]]=totalVector
}
hist(y[[1]])
hist(y[[2]])
hist(y[[5]])
hist(y[[10]])
hist(y[[30]])
hist(y[[100]])
help(replicate)
max=100
randomSamples=10000
x=c()
x=replicate(max,runif(randomSamples))
y=c()
#for(i in 1:max)
#{
#  x[[i]]=runif(10000)
#}
for(i in 1:lenght(x))
{
sumVector=c()
totalVector=x[[1]]
if(i>1)
{
for(j in 2:i)
{
sumVector=x[[j]]
totalVector=totalVector+sumVector
}
}
y[[i]]=totalVector
}
hist(y[[1]])
hist(y[[2]])
hist(y[[5]])
hist(y[[10]])
hist(y[[30]])
hist(y[[100]])
max=100
randomSamples=10000
x=c()
x=replicate(max,runif(randomSamples))
y=c()
#for(i in 1:max)
#{
#  x[[i]]=runif(10000)
#}
for(i in 1:length(x))
{
sumVector=c()
totalVector=x[[1]]
if(i>1)
{
for(j in 2:i)
{
sumVector=x[[j]]
totalVector=totalVector+sumVector
}
}
y[[i]]=totalVector
}
max=100
randomSamples=10000
x=c()
x=replicate(max,runif(randomSamples))
y=c()
#for(i in 1:max)
#{
#  x[[i]]=runif(10000)
#}
for(i in 1:max)
{
sumVector=c()
totalVector=x[[1]]
if(i>1)
{
for(j in 2:i)
{
sumVector=x[[j]]
totalVector=totalVector+sumVector
}
}
y[[i]]=totalVector
}
hist(y[[1]])
hist(y[[2]])
hist(y[[5]])
hist(y[[10]])
hist(y[[30]])
hist(y[[100]])
x
max=100
randomSamples=10000
x=c()
x=replicate(max,runif(randomSamples),simplify = FALSE)
y=c()
#for(i in 1:max)
#{
#  x[[i]]=runif(10000)
#}
for(i in 1:max)
{
sumVector=c()
totalVector=x[[1]]
if(i>1)
{
for(j in 2:i)
{
sumVector=x[[j]]
totalVector=totalVector+sumVector
}
}
y[[i]]=totalVector
}
hist(y[[1]])
hist(y[[2]])
hist(y[[5]])
hist(y[[10]])
hist(y[[30]])
hist(y[[100]])
hist(y[[1]],breaks = 5,include.lowest = TRUE,main = "Y[1]")
hist(y[[1]])
max=100
randomSamples=10000
x=c()
x=replicate(max,runif(randomSamples),simplify = FALSE)
y=c()
#for(i in 1:max)
#{
#  x[[i]]=runif(10000)
#}
for(i in 1:max)
{
sumVector=c()
totalVector=x[[1]]
if(i>1)
{
for(j in 2:i)
{
sumVector=x[[j]]
totalVector=totalVector+sumVector
}
}
y[[i]]=totalVector
}
hist(y[[1]])
hist(y[[2]])
hist(y[[5]])
hist(y[[10]])
hist(y[[30]])
hist(y[[100]])
start_time <- Sys.time()
totalCount=1000000
totalCountDecrementer=1000000
primeCount=0
x=sample(1000000,1000000)
y=sample(1000000,1000000)
gcd <- function(x, y) {
while(y) {
temp = y
y = x %% y
x = temp
}
return(x)
}
for(i in 1:totalCountDecrementer)  {
#smaller=min(x,y)
#prime=TRUE
#for(i in 2:sqrt(smaller)){
#  if(x%%i==0 & y%%i==0) {
#    prime=FALSE
#    break
#  }
#}
if(gcd(x[i],y[i]))
{
primeCount=primeCount+1
}
}
print(paste("Probability that 2 numbers are prime to each other is: ",primeCount/totalCount))
end_time <- Sys.time()
print(start_time)
print(end_time)
print(end_time - start_time)
x''
x
y
start_time <- Sys.time()
totalCount=1000000
totalCountDecrementer=1000000
primeCount=0
x=sample(1000000,1000000)
y=sample(1000000,1000000)
gcd <- function(x, y) {
while(y) {
temp = y
y = x %% y
x = temp
}
return(x)
}
for(i in 1:totalCount)  {
#smaller=min(x,y)
#prime=TRUE
#for(i in 2:sqrt(smaller)){
#  if(x%%i==0 & y%%i==0) {
#    prime=FALSE
#    break
#  }
#}
if(gcd(x[i],y[i]) == 1)
{
primeCount=primeCount+1
}
}
print(paste("Probability that 2 numbers are prime to each other is: ",primeCount/totalCount))
end_time <- Sys.time()
print(start_time)
print(end_time)
print(end_time - start_time)
start_time <- Sys.time()
avgRateMale=30
avgRateFemale=40
totalPersonRequired=1000000
maleObservationsPerHour=c()
femaleObservationsPerHour=c()
totalObservationsPerHour=c()
totalObservationsPerHourSum=c()
while(totalPersonRequired > 0){
maleObservations=rpois(5,lambda = avgRateMale)
femaleObservations=rpois(5,lambda = avgRateFemale)
totalPeople=sum(maleObservations)+sum(femaleObservations)
maleObservationsPerHour=c(maleObservationsPerHour,maleObservations)
femaleObservationsPerHour=c(femaleObservationsPerHour,femaleObservations)
totalObservationsPerHour=maleObservationsPerHour+femaleObservationsPerHour
totalPersonRequired=totalPersonRequired-totalPeople
}
print(i)
print(maleObservationsPerHour)
print(femaleObservationsPerHour)
print(totalObservationsPerHour)
totalWalkIn=sum(totalObservationsPerHour)
for(i in 1:length(totalObservationsPerHour)){
totalObservationsPerHourSum[i]=sum(totalObservationsPerHour[1:i])
}
print(paste("Expected Value = ",(avgRateMale/(avgRateMale+avgRateFemale))*totalWalkIn))
plot(totalObservationsPerHourSum,maleObservationsPerHour/totalObservationsPerHourSum, type="l")
end_time <- Sys.time()
print(start_time)
print(end_time)
print(end_time - start_time)
start_time <- Sys.time()
avgRateMale=30
avgRateFemale=40
totalPersonRequired=1000000
maleObservationsPerHour=c()
femaleObservationsPerHour=c()
totalObservationsPerHour=c()
totalObservationsPerHourSum=c()
while(totalPersonRequired > 0){
maleObservations=rpois(5,lambda = avgRateMale)
femaleObservations=rpois(5,lambda = avgRateFemale)
totalPeople=sum(maleObservations)+sum(femaleObservations)
maleObservationsPerHour=c(maleObservationsPerHour,maleObservations)
femaleObservationsPerHour=c(femaleObservationsPerHour,femaleObservations)
totalObservationsPerHour=maleObservationsPerHour+femaleObservationsPerHour
totalPersonRequired=totalPersonRequired-totalPeople
}
#print(i)
#print(maleObservationsPerHour)
#print(femaleObservationsPerHour)
#print(totalObservationsPerHour)
totalWalkIn=sum(totalObservationsPerHour)
for(i in 1:length(totalObservationsPerHour)){
totalObservationsPerHourSum[i]=sum(totalObservationsPerHour[1:i])
}
print(paste("Expected Value = ",(avgRateMale/(avgRateMale+avgRateFemale))*totalWalkIn))
plot(totalObservationsPerHourSum,maleObservationsPerHour/totalObservationsPerHourSum, type="l")
end_time <- Sys.time()
print(start_time)
print(end_time)
print(end_time - start_time)
plot(totalObservationsPerHourSum,maleObservationsPerHour/totalObservationsPerHourSum, xlab = "z",ylab = "x/z",type="l")
setwd("H:/TCD/DataAnalytics/LabAssignment")
library(readxl)
Data <- read_excel("code/DataAnalytics/DT-Credit.xls")
str(Data)
attach(Data)
library(rpart)
library(rpart.plot)
library(partykit)
cols <- c(4:31)
Data[cols] <- lapply(Data[cols], factor)
DT_Model=rpart(RESPONSE~.,data=Data,control=rpart.control(minsplit = 60, minbucket = 30,maxdepth = 4))
plot(as.party(DT_Model))
Target=as.factor(ifelse(RESPONSE==1,'Y','N'))
Data <- data.frame(Data,Target)
str(Data)
Data1=Data[-c(31)]
DT_Model1<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=4 ))
plot(as.party(DT_Model1))
print(DT_Model1)
DT_Model2<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=8))
plot(as.party(DT_Model2))
print(DT_Model2)
library(readxl)
Data <- read_excel("code/DataAnalytics/DT-Credit.xls")
str(Data)
attach(Data)
library(rpart)
library(rpart.plot)
library(partykit)
cols <- c(4:31)
Data[cols] <- lapply(Data[cols], factor)
DT_Model=rpart(RESPONSE~.,data=Data,control=rpart.control(minsplit = 60, minbucket = 30,maxdepth = 4))
plot(as.party(DT_Model))
Target=as.factor(ifelse(RESPONSE==1,'Y','N'))
Data <- data.frame(Data,Target)
str(Data)
Data1=Data[-c(31)]
DT_Model1<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=4 ))
plot(as.party(DT_Model1))
print(DT_Model1)
DT_Model2<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=8))
plot(as.party(DT_Model2))
print(DT_Model2)
library(readxl)
Data <- read_excel("H:\TCD\DataAnalytics\LabAssignment\DT-Credit.xls")
str(Data)
library(readxl)
Data <- read_excel("H:/TCD/DataAnalytics/LabAssignment/DT-Credit.xls")
str(Data)
attach(Data)
library(rpart)
library(rpart.plot)
library(partykit)
cols <- c(4:31)
Data[cols] <- lapply(Data[cols], factor)
DT_Model=rpart(RESPONSE~.,data=Data,control=rpart.control(minsplit = 60, minbucket = 30,maxdepth = 4))
plot(as.party(DT_Model))
Target=as.factor(ifelse(RESPONSE==1,'Y','N'))
Data <- data.frame(Data,Target)
str(Data)
Data1=Data[-c(31)]
DT_Model1<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=4 ))
plot(as.party(DT_Model1))
print(DT_Model1)
DT_Model2<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=8))
plot(as.party(DT_Model2))
print(DT_Model2)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("partykit")
library(readxl)
Data <- read_excel("H:/TCD/DataAnalytics/LabAssignment/DT-Credit.xls")
str(Data)
attach(Data)
library(rpart)
library(rpart.plot)
library(partykit)
cols <- c(4:31)
Data[cols] <- lapply(Data[cols], factor)
DT_Model=rpart(RESPONSE~.,data=Data,control=rpart.control(minsplit = 60, minbucket = 30,maxdepth = 4))
plot(as.party(DT_Model))
Target=as.factor(ifelse(RESPONSE==1,'Y','N'))
Data <- data.frame(Data,Target)
str(Data)
Data1=Data[-c(31)]
DT_Model1<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=4 ))
plot(as.party(DT_Model1))
print(DT_Model1)
DT_Model2<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=8))
plot(as.party(DT_Model2))
print(DT_Model2)
DT_Model3<-rpart(Target~., data=Data1, control=rpart.control)
plot(as.party(DT_Model3))
print(DT_Model3$cptable)
opt=which.min(DT_Model3$cptable [,"xerror"])
DT_Model2<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=8))
plot(as.party(DT_Model2))
print(DT_Model2)
print(DT_Model2$cptable)
opt=which.min(DT_Model2$cptable [,"xerror"])
cp=DT_Model2$cptable [opt,"CP"]
DT_Model_pruned=prune(DT_Model2,cp = cp)
plot(as.party(DT_Model_pruned))
library(readxl)
Data <- read_excel("H:/TCD/DataAnalytics/LabAssignment/DT-Credit.xls")
str(Data)
attach(Data)
library(rpart)
library(rpart.plot)
library(partykit)
cols <- c(4:31)
Data[cols] <- lapply(Data[cols], factor)
DT_Model=rpart(RESPONSE~.,data=Data,control=rpart.control(minsplit = 60, minbucket = 30,maxdepth = 4))
plot(as.party(DT_Model))
Target=as.factor(ifelse(RESPONSE==1,'Y','N'))
Data <- data.frame(Data,Target)
str(Data)
Data1=Data[-c(31)]
DT_Model1<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=4 ))
plot(as.party(DT_Model1))
print(DT_Model1)
DT_Model2<-rpart(Target~., data=Data1, control=rpart.control(minsplit=60, minbucket=30, maxdepth=8))
plot(as.party(DT_Model2))
print(DT_Model2)
print(DT_Model2$cptable)
opt=which.min(DT_Model2$cptable [,"xerror"])
#pruning
cp=DT_Model2$cptable [opt,"CP"]
DT_Model_pruned=prune(DT_Model2,cp = cp)
plot(as.party(DT_Model_pruned))
